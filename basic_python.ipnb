{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "219423a1-870a-498d-afc2-9606b571e4eb",
   "metadata": {},
   "source": [
    "1.\tPrint \"Hello, World!\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "325cd888-a969-4cf2-9f91-8f2fd09bcb11",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello World\n"
     ]
    }
   ],
   "source": [
    "print(\"Hello World\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9fe46df0-66fd-4b99-9e13-db3c89fe8460",
   "metadata": {},
   "source": [
    "2.\tSwap two numbers without a temporary variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "id": "06c20409-3cee-4c9a-9c25-1ca2710e9e74",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(3, 2)\n"
     ]
    }
   ],
   "source": [
    "def swap_numbers(a,b):\n",
    "    a = a + b # 10+20 = 30\n",
    "    b = a - b #  30 - 20 = 10\n",
    "    a = a - b\n",
    "    return a, b\n",
    "\n",
    "result = swap_numbers(2,3)\n",
    "print(result)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f25a6486-8b06-4f78-8e32-00c37dcfdd36",
   "metadata": {},
   "source": [
    "3.\tFind the factorial of a number (loop)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "id": "b2d30db0-6602-4a67-a219-d641ef8e9acf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter number 6\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "720\n"
     ]
    }
   ],
   "source": [
    "def factorial(n):\n",
    "    f = 1\n",
    "    for i in range(1,n+1):\n",
    "        f = i * f\n",
    "    return f\n",
    "    \n",
    "n = int(input(\"enter number\"))\n",
    "result = factorial(n)\n",
    "print(result)\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "76a7f709-9977-4cbc-920a-3aa0cf5c3469",
   "metadata": {},
   "source": [
    "4.\tFibonacci sequence (loop)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b561031b-b59c-42b1-a31e-21e305fdd983",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter number 120\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229 832040 1346269 2178309 3524578 5702887 9227465 14930352 24157817 39088169 63245986 102334155 165580141 267914296 433494437 701408733 1134903170 1836311903 2971215073 4807526976 "
     ]
    }
   ],
   "source": [
    "def fibonacci(n):\n",
    "    if n<=1:\n",
    "        return n\n",
    "    else:\n",
    "        return fibonacci(n-1) + fibonacci(n-2)\n",
    "\n",
    "n = int(input(\"enter number\"))\n",
    "for i in range(n):\n",
    "    print(fibonacci(i), end=\" \")\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "be41b2a6-b7d0-4f93-abdf-917834b91dc1",
   "metadata": {},
   "source": [
    "5.\tCheck if a number is prime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "id": "454a90b0-9d1a-4571-bea5-3d3c066cebd9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n",
      "False\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "def is_prime(n):\n",
    "    if n <= 1:\n",
    "        return False\n",
    "    if n == 2:\n",
    "        return True\n",
    "    if n % 2 == 0:   # any even number > 2 is not prime\n",
    "        return False\n",
    "    for i in range(3, int(n**0.5) + 1, 2):  # check only odd divisors\n",
    "        if n % i == 0:\n",
    "            return False\n",
    "    return True\n",
    "\n",
    "# Example\n",
    "print(is_prime(2))   # True\n",
    "print(is_prime(9))   # False\n",
    "print(is_prime(13))  # True\n",
    "        \n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "e529b299-b0f3-4e2d-8d0c-36ee1f57826b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n",
      "False\n"
     ]
    }
   ],
   "source": [
    "#Beginner friendly\n",
    "def is_prime(n):\n",
    "   if n<=1:\n",
    "       return False\n",
    "   for i in range(2, n):\n",
    "        if n%i ==0:\n",
    "            return False\n",
    "   return True\n",
    "\n",
    "# Example\n",
    "print(is_prime(51))   # True\n",
    "print(is_prime(10))  # False\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0ef3eaea-323f-4e56-9d27-c2e860df08da",
   "metadata": {},
   "source": [
    "6.\tReverse a string\n",
    "  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "8b5f64f7-72b9-4293-ad1f-8796f000444f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ivallaP\n"
     ]
    }
   ],
   "source": [
    "mystring = 'Pallavi'\n",
    "mylist = list(mystring)\n",
    "\n",
    "result = mystring[::-1]\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "id": "f2a82f7c-dbe9-4311-b243-e66fbbf5cf3d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ivallaP\n"
     ]
    }
   ],
   "source": [
    "def reverse_string(mystring):\n",
    "    l = ''\n",
    "    for char in mystring:\n",
    "        l = char + l\n",
    "    return l\n",
    "\n",
    "mystring = 'Pallavi'\n",
    "print(reverse_string(mystring))\n",
    "\n",
    "   "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "237f7395-e994-44e5-a613-580f9eb0e644",
   "metadata": {},
   "source": [
    "7.\tPalindrome check (string & number)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "id": "50863d2e-501d-4704-8080-5fe68936c4f3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter a string pallavi\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Not Palindrome\n"
     ]
    }
   ],
   "source": [
    "def palindrome(mystring):\n",
    "    reversed_string = ''\n",
    "    for i in mystring:\n",
    "        reversed_string = i + reversed_string\n",
    "        #print(reversed_string)\n",
    "    if reversed_string == mystring:\n",
    "        print(\"Palindrome\")\n",
    "    else:\n",
    "        print(\"Not Palindrome\")\n",
    "\n",
    "mystring = input(\"enter a string\")\n",
    "\n",
    "palindrome(mystring)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b52ac5b6-bacf-4af2-9ecb-c03e5d8d67eb",
   "metadata": {},
   "source": [
    "8.\tCount vowels and consonants in a string"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "id": "ce539485-ba1b-438a-8f3d-77fc74899744",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3 4\n"
     ]
    }
   ],
   "source": [
    "\n",
    "mystring = 'pallavi'\n",
    "\n",
    "def countalph(mystring):\n",
    "\n",
    "    vowels = ['a','e','i','o','u']\n",
    "    constants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm','n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']   \n",
    "    vc = 0\n",
    "    cc = 0\n",
    "    for char in mystring:\n",
    "        if char in vowels:\n",
    "            vc = vc+1\n",
    "        else:\n",
    "            cc = cc+1\n",
    "    print(vc,cc)\n",
    "    \n",
    "countalph('pallavi')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c1be534e-ca6f-48d6-a8aa-51d110c86cdd",
   "metadata": {},
   "source": [
    "9.\tFind largest of 3 numbers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "fa18d91f-7357-4bc6-8128-46b08e34839c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "41\n"
     ]
    }
   ],
   "source": [
    "numbers = [21,31,41]\n",
    "\n",
    "numbers.sort(reverse = True)\n",
    "\n",
    "print(numbers[0])\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "id": "153071b5-3985-4581-b4c4-aa09d8fceaa1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "41\n"
     ]
    }
   ],
   "source": [
    "numbers = [21,31,41,2,3,5,6]\n",
    "\n",
    "def large_value(numbers):\n",
    "    large = numbers[0]\n",
    "    for n in numbers:\n",
    "        if n > large:\n",
    "            large = n\n",
    "    return large\n",
    "\n",
    "result = large_value(numbers)\n",
    "print(result)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "id": "9c073bb4-30d9-4f33-985c-2788edcbdb75",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "41\n"
     ]
    }
   ],
   "source": [
    "large = numbers[0]\n",
    "for n in numbers:\n",
    "    if n > large:\n",
    "        large = n\n",
    "print(large)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a56fcbe3-bc95-4d42-be45-1b480a289072",
   "metadata": {},
   "source": [
    "10.\tSum of digits of a number"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "id": "c2992eaf-d095-4e24-b75a-9ffead8a2e48",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter number 1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n"
     ]
    }
   ],
   "source": [
    "def sum_of_digits(n):\n",
    "    sum = 0\n",
    "    if n == ' ':\n",
    "        print(\"Empty string identified\")\n",
    "    else:\n",
    "        for i in str(n):\n",
    "            sum = sum + int(i)\n",
    "        return sum\n",
    "    \n",
    "n = int(input(\"enter number\"))\n",
    "result = sum_of_digits(n)\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "905e8e6d-edac-4024-b78e-b8ebd14f86f0",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e0e7d970-b7aa-4da8-97c8-0eb92d1ba8fb",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



